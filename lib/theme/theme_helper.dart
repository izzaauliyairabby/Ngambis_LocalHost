import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray90002,
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primaryContainer,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.deepPurpleA40001,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(28.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: Color(0XFFFFFFFF),
          fontSize: 16.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blueGray30002,
          fontSize: 12.fSize,
          fontFamily: 'DM Sans',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 50.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 30.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 24.fSize,
          fontFamily: 'Ponnala',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 13.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 10.fSize,
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w800,
        ),
        labelSmall: TextStyle(
          color: appTheme.deepPurpleA70001,
          fontSize: 8.fSize,
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.gray400,
          fontSize: 20.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        titleMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 18.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray900,
          fontSize: 14.fSize,
          fontFamily: 'DM Sans',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFFFFFFF),
    primaryContainer: Color(0XFF4D4D4D),
    secondaryContainer: Color(0X19FFFFFF),

    // Error colors
    errorContainer: Color(0XFF9D97B4),
    onError: Color(0XFFFFEBB7),
    onErrorContainer: Color(0XFF3800FF),

    // On colors(text colors)
    onPrimary: Color(0X0C3F13E4),
    onPrimaryContainer: Color(0XFF150A33),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => Color(0XFFD0DBE0);
  Color get blueGray10001 => Color(0XFFD4D4D4);
  Color get blueGray20026 => Color(0X26ABC7D3);
  Color get blueGray300 => Color(0XFFA0A7B1);
  Color get blueGray30001 => Color(0XFF8B9AB6);
  Color get blueGray30002 => Color(0XFFA9A5B8);
  Color get blueGray30003 => Color(0XFF9FA7B1);
  Color get blueGray400 => Color(0XFF898989);
  Color get blueGray700 => Color(0XFF514A6B);
  Color get blueGray900 => Color(0XFF2B2B2B);
  Color get blueGray90001 => Color(0XFF2B2930);

  // DeepPurple
  Color get deepPurple300 => Color(0XFF9C8DD1);
  Color get deepPurple30001 => Color(0XFF886FE2);
  Color get deepPurpleA400 => Color(0XFF6338FD);
  Color get deepPurpleA40001 => Color(0XFF5424FD);
  Color get deepPurpleA700 => Color(0XFF3C06F9);
  Color get deepPurpleA70001 => Color(0XFF3708DC);

  // Gray
  Color get gray100 => Color(0XFFFCF3F3);
  Color get gray10001 => Color(0XFFF5F5F5);
  Color get gray400 => Color(0XFFC9C0C0);
  Color get gray500 => Color(0XFFAAAAAA);
  Color get gray900 => Color(0XFF150A3C);
  Color get gray90001 => Color(0XFF111111);
  Color get gray90002 => Color(0XFF1F1F1F);

  // Green
  Color get green500 => Color(0XFF4DC132);
  Color get greenA700 => Color(0XFF04B015);

  // Indigod
  Color get indigo2002d => Color(0X2D99AAC5);

  // Indigo
  Color get indigo300 => Color(0XFF6185C9);
  Color get indigoA100 => Color(0XFF7F8BFA);

  // Orange
  Color get orange400 => Color(0XFFFF9228);

  // Red
  Color get red300 => Color(0XFFED676A);
  Color get red700 => Color(0XFFE5252A);
  Color get redA100 => Color(0XFFFF8588);
  Color get redA200 => Color(0XFFFF464A);

  // White
  Color get whiteA700 => Color(0XFFFEFDFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
